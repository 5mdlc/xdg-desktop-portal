#include <dlfcn.h>
#include <gtk/gtk.h>

# define RTLD_DEFAULT	((void *) 0)



GtkWidget *window;
void print_msg(GtkWidget *widget, gpointer _window)
{
  const gchar *title = "test";
  GtkWindow* parent_window = GTK_WINDOW(window);
  GtkWidget *dialog;

  const gchar *accept_label = "pepe";

  void  * (*sGtkFileChooserNativeNewPtr)(const gchar*, GtkWindow*, GtkFileChooserAction, const gchar*, const gchar*);

  sGtkFileChooserNativeNewPtr = (void* (*)(const gchar*, GtkWindow*, GtkFileChooserAction, const gchar*,
                 const gchar*))dlsym(RTLD_DEFAULT, "gtk_file_chooser_native_new");
  fprintf(stderr, "sGtkFileChooserNativeNewPtr := 0x%x\n", sGtkFileChooserNativeNewPtr );
  if (sGtkFileChooserNativeNewPtr != NULL) {
    dialog = (*sGtkFileChooserNativeNewPtr)(title, parent_window, GTK_FILE_CHOOSER_ACTION_OPEN, accept_label, NULL);

    fprintf(stderr, "dialog := 0x%x\n", dialog );

    if(gtk_native_dialog_run (GTK_NATIVE_DIALOG (dialog)) == GTK_RESPONSE_ACCEPT){
      char *filename;

      GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);
      filename = gtk_file_chooser_get_filename (chooser);

      fprintf(stderr, "open_file (%s);\n",filename);
      fprintf(stderr, "g_free (%s);\n",filename);
    }

    //gtk_widget_destroy (dialog);
    //gtk_object_unref (dialog);
  }

  printf("Hello world, from a sandbox.\n");
}

void print_msg2(GtkWidget *widget, gpointer _window)
{
  const gchar *title = "test2";
  GtkWindow* parent_window = GTK_WINDOW(window);
  GtkWidget *dialog;

  const gchar *accept_label = "pipi";

  if (1){
    dialog = gtk_file_chooser_dialog_new (title, parent_window, GTK_FILE_CHOOSER_ACTION_OPEN,        GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
                                      GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT, NULL);

    fprintf(stderr, "dialog := 0x%x\n", dialog );

    if(gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_ACCEPT){
      char *filename;

      GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);
      filename = gtk_file_chooser_get_filename (chooser);

      fprintf(stderr, "open_file (%s);\n",filename);
      fprintf(stderr, "g_free (%s);\n",filename);
    }

    gtk_widget_destroy (dialog);
    //gtk_object_unref (dialog);
  }

  printf("Hello world, from a sandbox.\n");
}

int
main(int argc, char *argv[])
{
  GtkWidget *button, *native;
  GtkWidget *halign, *halign2;

  gtk_init(&argc, &argv);

  window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(window), "testgtk");
  gtk_window_set_default_size(GTK_WINDOW(window), 300, 200);
  gtk_container_set_border_width(GTK_CONTAINER(window), 15);
  
  button = gtk_button_new_with_mnemonic("_Dialog");
  native = gtk_button_new_with_mnemonic("_Native");
  
  g_signal_connect(button, "clicked", G_CALLBACK(print_msg2), NULL);  
  
  halign = gtk_alignment_new(0, 0, 0, 0);
  halign2 = gtk_alignment_new(1, 0, 0, 0);
  gtk_container_add(GTK_CONTAINER(halign), native);
  gtk_container_add(GTK_CONTAINER(halign2), button);
  gtk_container_add(GTK_CONTAINER(window), halign);  
  gtk_container_add(GTK_CONTAINER(window), halign2);  

  gtk_widget_show_all(window);
  
  g_signal_connect(G_OBJECT(window), "destroy", G_CALLBACK(gtk_main_quit), NULL); 

  gtk_main();

  return 0;
}

